Refer to link:

https://scriptcrunch.com/create-ca-tls-ssl-certificates-keys/

This guide explains the process of creating CA keys and certificates and use them to generate SSL/TLS certificates & keys using SSL
utilities like openssl and cfssl.

PKI -- Public Key Infra structure
CA -- Certificate Authority
CSR -- Certificate Signing Request
SSL -- Secure Socket Layer
TLS -- Transport Layer Security

Certificate Creation WorkFlow:

CA Key and Certificate Creation:

1) Generate CA Private Key file using Openssl
  -> openssl genrsa -out ca.key 2048
    
2) Crate CA Root Certificate using CA Private Key.(Generate CA x509 certificate file using the CA key. 
You can define the validity of certificate in days. Here we have mentioned 1825 days)

 -> openssl req -x509 -new -nodes  -key ca.key -sha256 -days 1825 -out ca.crt


Server Certificate Creation:

1) Generate a Server Private Key using utility Openssl.
   openssl genrsa -out server.key 2048
   
2) Create a CSR Using the Server Private Key
3 Generate Server certificate using the CA Key, CA Cert and Server CSR.

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
Step 2: Create a configuration file named csr.conf for generating the Certificate Signing Request (CSR) 
as shown below. Replace the values as per your needs.

cat > csr.conf <<EOF
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn
 
[ dn ]
C = US
ST = California
L = San Fransisco
O = Scriptcrunch
OU = Scriptcrunch Dev
CN = scriptcrunch.com
 
[ req_ext ]
subjectAltName = @alt_names
 
[ alt_names ]
DNS.1 = scriptcrunch
DNS.2 = scriptcrunch.com
IP.1 = 10.34.12.5
IP.2 = 10.34.12.5
 
[ v3_ext ]
authorityKeyIdentifier=keyid,issuer:always
basicConstraints=CA:FALSE
keyUsage=keyEncipherment,dataEncipherment
extendedKeyUsage=serverAuth,clientAuth
subjectAltName=@alt_names
EOF


 -> openssl req -new -key server.key -out server.csr -config csr.conf
 
 3) Generate the server SSL certificate using ca.key, ca.crt and server.csr
 
 openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \
-CAcreateserial -out server.crt -days 10000 \
-extensions v3_ext -extfile csr.conf


TLS Handshake Steps:

	1) TLS runs over a reliable transport (TCP), which means that we must first complete the TCP three-way handshake, which takes one full roundtrip.
	
	2) With the TCP connection in place, the client sends a number of specifications in plain text, such as the version of the TLS protocol it is running, the list of supported ciphersuites, and other TLS options it may want to use.
	
	3) The server picks the TLS protocol version for further communication, decides on a ciphersuite from the list provided by the client, attaches its certificate, and sends the response back to the client. Optionally, the server can also send a request for the client’s certificate and parameters for other TLS extensions.
	
	4) Assuming both sides are able to negotiate a common version and cipher, and the client is happy with the certificate provided by the server, the client initiates either the RSA or the Diffie-Hellman key exchange, which is used to establish the symmetric key for the ensuing session.
	
	
	5) RSA handshake has been the dominant key exchange mechanism in most TLS deployments: the client generates a symmetric key, encrypts it with the server’s public key, and sends it to the server to use as the symmetric key for the established session. In turn, the server uses its private key to decrypt the sent symmetric key and the key-exchange is complete. From this point forward the client and server use the negotiated symmetric key to encrypt their session
	
	6) The server processes the key exchange parameters sent by the client, checks message integrity by verifying the MAC, and returns an encrypted Finished message back to the client.
	
	
	7) The client decrypts the message with the negotiated symmetric key, verifies the MAC, and if all is well, then the tunnel is established and application data can now be sent.
	
 
 




